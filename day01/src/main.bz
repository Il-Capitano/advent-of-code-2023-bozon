import std::format;
import std::vector;
import common;

function find_first_digit(s: str) -> int32
{
	for (let c in s.chars())
	{
		if (c >= '0' && c <= '9')
		{
			return c - '0';
		}
	}
	return 0;
}

function find_last_digit(s: str) -> int32
{
	for (mut it = s.end_ptr(); it != s.begin_ptr();)
	{
		--it;
		let c = *it as char;
		if (c >= '0' && c <= '9')
		{
			return c - '0';
		}
	}
	return 0;
}

function part1(input: &std::vector<str>) -> int32
{
	mut calibration_sum = 0;

	for (let &line in input)
	{
		let first_digit = find_first_digit(line);
		let last_digit = find_last_digit(line);
		let calibration_value = 10 * first_digit + last_digit;
		calibration_sum += calibration_value;
	}

	return calibration_sum;
}

function find_first_digit_spelled(s: str) -> int32
{
	for (mut it = s.begin_ptr(); it != s.end_ptr(); ++it)
	{
		let s = __builtin_str_from_ptrs(it, s.end_ptr());
		if (s.starts_with("1") || s.starts_with("one"))
		{
			return 1;
		}
		else if (s.starts_with("2") || s.starts_with("two"))
		{
			return 2;
		}
		else if (s.starts_with("3") || s.starts_with("three"))
		{
			return 3;
		}
		else if (s.starts_with("4") || s.starts_with("four"))
		{
			return 4;
		}
		else if (s.starts_with("5") || s.starts_with("five"))
		{
			return 5;
		}
		else if (s.starts_with("6") || s.starts_with("six"))
		{
			return 6;
		}
		else if (s.starts_with("7") || s.starts_with("seven"))
		{
			return 7;
		}
		else if (s.starts_with("8") || s.starts_with("eight"))
		{
			return 8;
		}
		else if (s.starts_with("9") || s.starts_with("nine"))
		{
			return 9;
		}
	}
	return 0;
}

function find_last_digit_spelled(s: str) -> int32
{
	for (mut end = s.end_ptr(); end != s.begin_ptr(); --end)
	{
		let s = __builtin_str_from_ptrs(s.begin_ptr(), end);
		if (s.ends_with("1") || s.ends_with("one"))
		{
			return 1;
		}
		else if (s.ends_with("2") || s.ends_with("two"))
		{
			return 2;
		}
		else if (s.ends_with("3") || s.ends_with("three"))
		{
			return 3;
		}
		else if (s.ends_with("4") || s.ends_with("four"))
		{
			return 4;
		}
		else if (s.ends_with("5") || s.ends_with("five"))
		{
			return 5;
		}
		else if (s.ends_with("6") || s.ends_with("six"))
		{
			return 6;
		}
		else if (s.ends_with("7") || s.ends_with("seven"))
		{
			return 7;
		}
		else if (s.ends_with("8") || s.ends_with("eight"))
		{
			return 8;
		}
		else if (s.ends_with("9") || s.ends_with("nine"))
		{
			return 9;
		}
	}
	return 0;
}

function part2(input: &std::vector<str>) -> int32
{
	mut calibration_sum = 0;

	for (let &line in input)
	{
		let first_digit = find_first_digit_spelled(line);
		let last_digit = find_last_digit_spelled(line);
		let calibration_value = 10 * first_digit + last_digit;
		calibration_sum += calibration_value;
	}

	return calibration_sum;
}

function main()
{
	let input = read_file("input.txt");
	let input = input.as_str().by_line().collect();

	let part1_result = part1(input);
	std::print("part 1: {}\n", part1_result);
	let part2_result = part2(input);
	std::print("part 2: {}\n", part2_result);
}
