import std::format;
import std::vector;
import common;

function parse_input(input: str) -> std::vector<[: uint8]>
{
	mut result = std::vector<[: uint8]>();
	for (let line in input.by_line())
	{
		result.push_back(line.bytes());
	}
	return move result;
}

function is_digit(c: uint8) -> bool
{
	let c = c as char;
	return c >= '0' && c <= '9';
}

function is_symbol(c: uint8) -> bool
{
	let c = c as char;
	return !(c >= '0' && c <= '9') && c != '.';
}

function bytes_to_str(bytes: [: uint8]) -> str
{
	return __builtin_str_from_ptrs(bytes.begin(), bytes.end());
}

function find_number(line: [: uint8]) -> ?[usize, usize]
{
	for (let i in 0..line.size())
	{
		if (line[i].is_digit())
		{
			for (let j in i + 1..line.size())
			{
				if (!line[j].is_digit())
				{
					let result = [ i, j ];
					return result;
				}
			}
			let result = [ i, line.size() ];
			return result;
		}
	}
	return null;
}

function is_next_to_symbol(input: [: [: uint8]], i: usize, begin: usize, end: usize) -> bool
{
	let height = input.size();
	let width = input[0].size();
	if (i != 0)
	{
		let left = if (begin == 0) { 0 } else { begin - 1 };
		let right = if (end == width) { width } else { end + 1 };
		for (let j in left..right)
		{
			if (input[i - 1][j].is_symbol())
			{
				return true;
			}
		}
	}

	if (begin != 0 && input[i][begin - 1].is_symbol())
	{
		return true;
	}

	if (end != width && input[i][end].is_symbol())
	{
		return true;
	}

	if (i != height - 1)
	{
		let left = if (begin == 0) { 0 } else { begin - 1 };
		let right = if (end == width) { width } else { end + 1 };
		for (let j in left..right)
		{
			if (input[i + 1][j].is_symbol())
			{
				return true;
			}
		}
	}

	return false;
}

function part1(input: [: [: uint8]]) -> int32
{
	mut parts_sum = 0;

	for (let i in 0..input.size())
	{
		mut line = input[i];
		mut prev_end = 0uz;
		while (true)
		{
			let number_edges = find_number(line);
			if (number_edges == null)
			{
				break;
			}

			let [begin, end] = number_edges.get_value();
			if (is_next_to_symbol(input, i, prev_end + begin, prev_end + end))
			{
				parts_sum += parse_int(int32, bytes_to_str(line[begin..end]));
			}
			line = line[end..];
			prev_end += end;
		}
	}

	return parts_sum;
}

function get_part_number(line: [: uint8], j: usize) -> int32
{
	mut left = j;
	mut right = j;
	while (left != 0 && line[left - 1].is_digit())
	{
		--left;
	}
	while (right != line.size() && line[right].is_digit())
	{
		++right;
	}
	return parse_int(int32, bytes_to_str(line[left..right]));
}

function get_part_numbers(input: [: [: uint8]], i: usize, j: usize) -> ?[2: int32]
{
	let height = input.size();
	let width = input[0].size();

	mut result = [2: int32]();
	mut result_index = 0uz;

	if (i != 0)
	{
		let line = input[i - 1];
		// only a single part number is on top
		if (line[j].is_digit())
		{
			if (result_index >= result.size())
			{
				return null;
			}
			result[result_index] = get_part_number(line, j);
			result_index += 1;
		}
		else
		{
			if (j != 0 && line[j - 1].is_digit())
			{
				if (result_index >= result.size())
				{
					return null;
				}
				result[result_index] = get_part_number(line, j - 1);
				result_index += 1;
			}
			if (j != width - 1 && line[j + 1].is_digit())
			{
				if (result_index >= result.size())
				{
					return null;
				}
				result[result_index] = get_part_number(line, j + 1);
				result_index += 1;
			}
		}
	}

	{
		let line = input[i];
		if (j != 0 && line[j - 1].is_digit())
		{
			if (result_index >= result.size())
			{
				return null;
			}
			result[result_index] = get_part_number(line, j - 1);
			result_index += 1;
		}
		if (j != width - 1 && line[j + 1].is_digit())
		{
			if (result_index >= result.size())
			{
				return null;
			}
			result[result_index] = get_part_number(line, j + 1);
			result_index += 1;
		}
	}

	if (i != height - 1)
	{
		let line = input[i + 1];
		// only a single part number is below
		if (line[j].is_digit())
		{
			if (result_index >= result.size())
			{
				return null;
			}
			result[result_index] = get_part_number(line, j);
			result_index += 1;
		}
		else
		{
			if (j != 0 && line[j - 1].is_digit())
			{
				if (result_index >= result.size())
				{
					return null;
				}
				result[result_index] = get_part_number(line, j - 1);
				result_index += 1;
			}
			if (j != width - 1 && line[j + 1].is_digit())
			{
				if (result_index >= result.size())
				{
					return null;
				}
				result[result_index] = get_part_number(line, j + 1);
				result_index += 1;
			}
		}
	}

	return result;
}

function part2(input: [: [: uint8]]) -> int32
{
	let height = input.size();
	let width = input[0].size();

	mut gear_ratio_sum = 0;

	for (let i in 0..height)
	{
		for (let j in 0..width)
		{
			if (input[i][j] as char == '*')
			{
				let part_numbers = get_part_numbers(input, i, j);
				if (part_numbers != null)
				{
					let &part_numbers = part_numbers.get_value();
					gear_ratio_sum += part_numbers[0] * part_numbers[1];
				}
			}
		}
	}

	return gear_ratio_sum;
}

function main()
{
	let input = read_file("input.txt");
	let input = parse_input(input.as_str());

	let part1_result = part1(input.as_slice());
	std::print("part 1: {}\n", part1_result);
	let part2_result = part2(input.as_slice());
	std::print("part 2: {}\n", part2_result);
}
