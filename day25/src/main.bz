import std::format;
import std::vector;
import std::utils;
import common;

struct node_t
{
	.weight: usize;
	.connections: std::vector<usize>;
}

function get_id(node: str, string_ids: &mut std::vector<str>) -> usize
{
	for (let i in 0..string_ids.size())
	{
		if (string_ids[i] == node)
		{
			return i;
		}
	}

	string_ids.push_back(node);
	return string_ids.size() - 1;
}

function contains(a: [: auto], v: #auto) -> bool
{
	for (let &e in a)
	{
		if (e == v)
		{
			return true;
		}
	}
	return false;
}

function parse_input(input: str) -> std::vector<node_t>
{
	mut string_connections = std::vector<[str, std::vector<str>]>();
	for (let line in input.by_line())
	{
		let [node, connections] = line.split(": ");
		string_connections.push_back([ node, connections.split_by(' ').collect() ]);
	}

	mut string_ids = std::vector<str>();
	mut result = std::vector<node_t>();
	result.resize(string_connections.size());
	for (let &[node, connections] in string_connections)
	{
		let node_id = get_id(node, string_ids);
		if (node_id >= result.size())
		{
			result.resize(node_id + 1);
		}
		for (let &connection in connections)
		{
			let connection_id = get_id(connection, string_ids);
			if (connection_id >= result.size())
			{
				result.resize(connection_id + 1);
			}
			if (!result[node_id].connections.as_slice().contains(connection_id))
			{
				result[node_id].connections.push_back(connection_id);
			}
			if (!result[connection_id].connections.as_slice().contains(node_id))
			{
				result[connection_id].connections.push_back(node_id);
			}
		}
	}

	for (let &mut node in result)
	{
		node.weight = 1;
	}

	return move result;
}

function region_sizes_helper(network: [: node_t], node: usize, exclude: &[3: usize], visited: &mut std::vector<bool>)
{
	for (let c in network[node].connections)
	{
		if (!visited[c])
		{
			visited[c] = true;
			if (c != exclude[0] && c != exclude[1] && c != exclude[2])
			{
				region_sizes_helper(network, c, exclude, visited);
			}
		}
	}
}

function region_sizes(network: [: node_t], exclude: [3: usize], visited: &mut std::vector<bool>) -> [2: usize]
{
	for (let &mut value in visited)
	{
		value = false;
	}

	let start_node: usize = if (exclude[0] > 0) {
		0
	} else if (exclude[1] > 1) {
		1
	} else if (exclude[2] > 2) {
		2
	} else {
		3
	};
	region_sizes_helper(network, start_node, exclude, visited);

	mut true_region = 0uz;
	mut false_region = 0uz;
	for (let i in 0..visited.size())
	{
		if (i == exclude[0] || i == exclude[1] || i == exclude[2])
		{
			mut false_count = 0uz;
			mut true_count = 0uz;
			for (let node in network[i].connections)
			{
				if (visited[node])
				{
					true_count += 1;
				}
				else
				{
					false_count += 1;
				}
			}

			if (true_count > false_count)
			{
				true_region += 1;
			}
			else
			{
				false_region += 1;
			}
		}
		else if (visited[i])
		{
			true_region += 1;
		}
		else
		{
			false_region += 1;
		}
	}

	return [ true_region, false_region ];
}

function erase(nodes: &mut std::vector<usize>, node: usize)
{
	mut it = nodes.begin();
	mut trail = it;
	let end = nodes.end();

	while (it != end)
	{
		if (*it == node)
		{
			++it;
		}
		else
		{
			*trail = *it;
			++trail;
			++it;
		}
	}

	nodes.resize((trail - nodes.begin()) as usize);
}

function part1(network: [: node_t]) -> usize
{
	mut visited_buffer = std::vector<bool>();
	visited_buffer.resize(network.size());
	mut count = 0uz;
	for (let i in 0..network.size())
	{
		for (let j in i + 1..network.size())
		{
			for (let k in j + 1..network.size())
			{
				let [a, b] = region_sizes(network, [ i, j, k ], visited_buffer);
				if (b != 0)
				{
					return a * b;
				}
			}
		}
	}

	return count;
}

function part2(network: [: node_t]) -> int32
{
	return 0;
}

function main()
{
	let input = read_file("input.txt");
	let input = parse_input(input.as_str());

	let part1_result = part1(input.as_slice());
	std::print("part 1: {}\n", part1_result);
	let part2_result = part2(input.as_slice());
	std::print("part 2: {}\n", part2_result);
}
