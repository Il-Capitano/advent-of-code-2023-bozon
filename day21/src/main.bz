import std::format;
import std::vector;
import std::utils;
import std::math;
import common;

enum tile_kind: uint8
{
	garden,
	rock,
}

type map_t = std::vector<std::vector<tile_kind> >;

function parse_input(input: str) -> [map_t, usize, usize]
{
	mut map = map_t();
	mut start_i = 0uz;
	mut start_j = 0uz;

	mut i = 0uz;
	for (let line in input.by_line())
	{
		defer i += 1;

		let &mut row = map.emplace_back();
		mut j = 0uz;
		for (let c in line.chars())
		{
			defer j += 1;
			row.push_back(switch (c) {
				'.' => .garden,
				'S' => {
					start_i = i;
					start_j = j;
					.garden
				},
				'#' => .rock,
				else => unreachable,
			});
		}
	}

	return [ move map, start_i, start_j ];
}

function make_grid(T: typename, height: usize, width: usize) -> std::vector<std::vector<T> >
{
	mut result = std::vector<std::vector<T> >();
	result.resize(height);
	for (let &mut row in result)
	{
		row.resize(width);
	}
	return move result;
}

function reset_visited(visited: &mut std::vector<std::vector<bool> >)
{
	for (let &mut row in visited)
	{
		for (let &mut value in row)
		{
			value = false;
		}
	}
}

function part1(input: &[map_t, usize, usize]) -> usize
{
	let &[map, start_i, start_j] = input;
	let height = map.size();
	let width = map[0].size();

	mut visited = make_grid(bool, height, width);

	mut possible_plots = std::vector<[usize, usize]>();
	possible_plots.push_back([ start_i, start_j ]);

	for (let _ in 0..64)
	{
		reset_visited(visited);
		mut next_possible_plots = std::vector<[usize, usize]>();
		for (let &[i, j] in possible_plots)
		{
			if (i != 0 && !visited[i - 1, j] && map[i - 1, j] == .garden)
			{
				visited[i - 1, j] = true;
				next_possible_plots.push_back([ i - 1, j ]);
			}
			if (i != height - 1 && !visited[i + 1, j] && map[i + 1, j] == .garden)
			{
				visited[i + 1, j] = true;
				next_possible_plots.push_back([ i + 1, j ]);
			}
			if (j != 0 && !visited[i, j - 1] && map[i, j - 1] == .garden)
			{
				visited[i, j - 1] = true;
				next_possible_plots.push_back([ i, j - 1 ]);
			}
			if (j != width - 1 && !visited[i, j + 1] && map[i, j + 1] == .garden)
			{
				visited[i, j + 1] = true;
				next_possible_plots.push_back([ i, j + 1 ]);
			}
		}
		possible_plots = move next_possible_plots;
	}

	return possible_plots.size();
}

function get_distances(map: &map_t, start_i: usize, start_j: usize) -> std::vector<std::vector<usize> >
{
	let height = map.size();
	let width = map[0].size();
	mut distances = make_grid(usize, height, width);

	for (let &mut row in distances)
	{
		for (let &mut distance in row)
		{
			distance = usize.max;
		}
	}

	mut plots = std::vector<[usize, usize]>();
	plots.push_back([ start_i, start_j ]);
	mut distance = 0uz;
	distances[start_i, start_j] = 0;
	while (plots.size() > 0)
	{
		distance += 1;
		mut next_plots = std::vector<[usize, usize]>();
		for (let &[i, j] in plots)
		{
			if (i != 0 && map[i - 1, j] == .garden && distances[i - 1, j] > distance)
			{
				distances[i - 1, j] = distance;
				next_plots.push_back([ i - 1, j ]);
			}
			if (i != height - 1 && map[i + 1, j] == .garden && distances[i + 1, j] > distance)
			{
				distances[i + 1, j] = distance;
				next_plots.push_back([ i + 1, j ]);
			}
			if (j != 0 && map[i, j - 1] == .garden && distances[i, j - 1] > distance)
			{
				distances[i, j - 1] = distance;
				next_plots.push_back([ i, j - 1 ]);
			}
			if (j != width - 1 && map[i, j + 1] == .garden && distances[i, j + 1] > distance)
			{
				distances[i, j + 1] = distance;
				next_plots.push_back([ i, j + 1 ]);
			}
		}
		plots = move next_plots;
	}

	return move distances;
}

function count_even_odd(distances: &std::vector<std::vector<usize> >) -> [2: usize]
{
	let height = distances.size();
	let width = distances[0].size();

	mut even_count = 0uz;
	mut odd_count = 0uz;
	for (let i in 0..height)
	{
		for (let j in 0..width)
		{
			if (distances[i, j] != usize.max)
			{
				if (distances[i, j] % 2 == 0)
				{
					even_count += 1;
				}
				else
				{
					odd_count += 1;
				}
			}
		}
	}
	return [ even_count, odd_count ];
}

function count_possible_tiles(distances: &std::vector<std::vector<usize> >, step_count: usize) -> usize
{
	let height = distances.size();
	let width = distances[0].size();

	mut tile_count = 0uz;
	for (let i in 0..height)
	{
		for (let j in 0..width)
		{
			if (distances[i, j] <= step_count && distances[i, j] % 2 == step_count % 2)
			{
				tile_count += 1;
			}
		}
	}
	return tile_count;
}

function max(distances: &std::vector<std::vector<usize> >) -> usize
{
	mut result = 0uz;
	for (let &row in distances)
	{
		for (let distance in row)
		{
			if (distance != usize.max)
			{
				result = std::max(result, distance);
			}
		}
	}
	return result;
}

function part2(input: &[map_t, usize, usize]) -> usize
{
	let &[map, start_i, start_j] = input;
	let height = map.size();
	let width = map[0].size();
	std::assert(start_i == height / 2);
	std::assert(start_j == width / 2);
	std::assert(height == width);
	std::assert(height % 2 == 1);

	let north_west = get_distances(map, 0, 0);
	let north = get_distances(map, 0, start_j);
	let north_east = get_distances(map, 0, width - 1);

	let west = get_distances(map, start_i, 0);
	let center = get_distances(map, start_i, start_j);
	let east = get_distances(map, start_i, width - 1);

	let south_west = get_distances(map, height - 1, 0);
	let south = get_distances(map, height - 1, start_j);
	let south_east = get_distances(map, height - 1, width - 1);

	let step_count = 26501365uz;

	mut tile_count = count_possible_tiles(center, step_count);

	// north
	if (step_count >= start_i + 1)
	{
		let max_distance = south.max();
		let step_count = step_count - (start_i + 1);

		mut full_grid_count = step_count / height;
		mut remaining_step_count = step_count % height;
		while (remaining_step_count + height < max_distance)
		{
			full_grid_count -= 1;
			remaining_step_count += height;
		}

		let a_count = (full_grid_count + 1) / 2;
		let b_count = full_grid_count - a_count;
		let a_index = step_count % 2;
		let b_index = 1 - a_index;
		let counts = count_even_odd(south);
		tile_count += a_count * counts[a_index] + b_count * counts[b_index];
		while (remaining_step_count >= height)
		{
			tile_count += count_possible_tiles(south, remaining_step_count);
			remaining_step_count -= height;
		}
		tile_count += count_possible_tiles(south, remaining_step_count);
	}

	// south
	if (step_count >= height - start_i)
	{
		let max_distance = north.max();
		let step_count = step_count - (height - start_i);

		mut full_grid_count = step_count / height;
		mut remaining_step_count = step_count % height;
		while (remaining_step_count + height < max_distance)
		{
			full_grid_count -= 1;
			remaining_step_count += height;
		}

		let a_count = (full_grid_count + 1) / 2;
		let b_count = full_grid_count - a_count;
		let a_index = step_count % 2;
		let b_index = 1 - a_index;
		let counts = count_even_odd(north);
		tile_count += a_count * counts[a_index] + b_count * counts[b_index];
		while (remaining_step_count >= height)
		{
			tile_count += count_possible_tiles(north, remaining_step_count);
			remaining_step_count -= height;
		}
		tile_count += count_possible_tiles(north, remaining_step_count);
	}

	// west
	if (step_count >= start_j + 1)
	{
		let max_distance = east.max();
		let step_count = step_count - (start_j + 1);

		mut full_grid_count = step_count / height;
		mut remaining_step_count = step_count % height;
		while (remaining_step_count + height < max_distance)
		{
			full_grid_count -= 1;
			remaining_step_count += height;
		}

		let a_count = (full_grid_count + 1) / 2;
		let b_count = full_grid_count - a_count;
		let a_index = step_count % 2;
		let b_index = 1 - a_index;
		let counts = count_even_odd(east);
		tile_count += a_count * counts[a_index] + b_count * counts[b_index];
		while (remaining_step_count >= height)
		{
			tile_count += count_possible_tiles(east, remaining_step_count);
			remaining_step_count -= height;
		}
		tile_count += count_possible_tiles(east, remaining_step_count);
	}

	// east
	if (step_count >= width - start_j)
	{
		let max_distance = west.max();
		let step_count = step_count - (width - start_j);

		mut full_grid_count = step_count / height;
		mut remaining_step_count = step_count % height;
		while (remaining_step_count + height < max_distance)
		{
			full_grid_count -= 1;
			remaining_step_count += height;
		}

		let a_count = (full_grid_count + 1) / 2;
		let b_count = full_grid_count - a_count;
		let a_index = step_count % 2;
		let b_index = 1 - a_index;
		let counts = count_even_odd(west);
		tile_count += a_count * counts[a_index] + b_count * counts[b_index];
		while (remaining_step_count >= height)
		{
			tile_count += count_possible_tiles(west, remaining_step_count);
			remaining_step_count -= height;
		}
		tile_count += count_possible_tiles(west, remaining_step_count);
	}

	// north west
	if (step_count >= (start_i + 1) + (start_j + 1))
	{
		let max_distance = south_east.max();
		let step_count = step_count - (start_i + 1) - (start_j + 1);

		mut full_grid_count = step_count / height;
		mut remaining_step_count = step_count % height;
		while (remaining_step_count + height < max_distance)
		{
			full_grid_count -= 1;
			remaining_step_count += height;
		}

		// 1 + 3 + 5 + 7 + ... = sum(2n + 1) for n = [0, 1, ..., (full_grid_count + 1) / 2)
		let a_count = (full_grid_count + 1) / 2;
		let a_count = a_count * a_count;

		// 2 + 4 + 6 + 8 + ... = sum(2n + 2) for n = [0, 1, ..., full_grid_count / 2)
		let b_count = full_grid_count / 2;
		let b_count = b_count * (b_count + 1);

		std::assert(a_count + b_count == full_grid_count * (full_grid_count + 1) / 2);

		let a_index = step_count % 2;
		let b_index = 1 - a_index;
		let counts = count_even_odd(south_east);
		tile_count += a_count * counts[a_index] + b_count * counts[b_index];

		while (remaining_step_count >= height)
		{
			tile_count += (full_grid_count + 1) * count_possible_tiles(south_east, remaining_step_count);
			full_grid_count += 1;
			remaining_step_count -= height;
		}
		tile_count += (full_grid_count + 1) * count_possible_tiles(south_east, remaining_step_count);
	}

	// north east
	if (step_count >= (start_i + 1) + (width - start_j))
	{
		let max_distance = south_west.max();
		let step_count = step_count - (start_i + 1) - (width - start_j);

		mut full_grid_count = step_count / height;
		mut remaining_step_count = step_count % height;
		while (remaining_step_count + height < max_distance)
		{
			full_grid_count -= 1;
			remaining_step_count += height;
		}

		// 1 + 3 + 5 + 7 + ... = sum(2n + 1) for n = [0, 1, ..., (full_grid_count + 1) / 2)
		let a_count = (full_grid_count + 1) / 2;
		let a_count = a_count * a_count;

		// 2 + 4 + 6 + 8 + ... = sum(2n + 2) for n = [0, 1, ..., full_grid_count / 2)
		let b_count = full_grid_count / 2;
		let b_count = b_count * (b_count + 1);

		let a_index = step_count % 2;
		let b_index = 1 - a_index;
		let counts = count_even_odd(south_west);
		tile_count += a_count * counts[a_index] + b_count * counts[b_index];

		while (remaining_step_count >= height)
		{
			tile_count += (full_grid_count + 1) * count_possible_tiles(south_west, remaining_step_count);
			full_grid_count += 1;
			remaining_step_count -= height;
		}
		tile_count += (full_grid_count + 1) * count_possible_tiles(south_west, remaining_step_count);
	}

	// south west
	if (step_count >= (height - start_i) + (start_j + 1))
	{
		let max_distance = north_east.max();
		let step_count = step_count - (height - start_i) - (start_j + 1);

		mut full_grid_count = step_count / height;
		mut remaining_step_count = step_count % height;
		while (remaining_step_count + height < max_distance)
		{
			full_grid_count -= 1;
			remaining_step_count += height;
		}

		// 1 + 3 + 5 + 7 + ... = sum(2n + 1) for n = [0, 1, ..., (full_grid_count + 1) / 2)
		let a_count = (full_grid_count + 1) / 2;
		let a_count = a_count * a_count;

		// 2 + 4 + 6 + 8 + ... = sum(2n + 2) for n = [0, 1, ..., full_grid_count / 2)
		let b_count = full_grid_count / 2;
		let b_count = b_count * (b_count + 1);

		let a_index = step_count % 2;
		let b_index = 1 - a_index;
		let counts = count_even_odd(north_east);
		tile_count += a_count * counts[a_index] + b_count * counts[b_index];

		while (remaining_step_count >= height)
		{
			tile_count += (full_grid_count + 1) * count_possible_tiles(north_east, remaining_step_count);
			full_grid_count += 1;
			remaining_step_count -= height;
		}
		tile_count += (full_grid_count + 1) * count_possible_tiles(north_east, remaining_step_count);
	}

	// south east
	if (step_count >= (height - start_i) + (width - start_j))
	{
		let max_distance = north_west.max();
		let step_count = step_count - (height - start_i) - (width - start_j);

		mut full_grid_count = step_count / height;
		mut remaining_step_count = step_count % height;
		while (remaining_step_count + height < max_distance)
		{
			full_grid_count -= 1;
			remaining_step_count += height;
		}

		// 1 + 3 + 5 + 7 + ... = sum(2n + 1) for n = [0, 1, ..., (full_grid_count + 1) / 2)
		let a_count = (full_grid_count + 1) / 2;
		let a_count = a_count * a_count;

		// 2 + 4 + 6 + 8 + ... = sum(2n + 2) for n = [0, 1, ..., full_grid_count / 2)
		let b_count = full_grid_count / 2;
		let b_count = b_count * (b_count + 1);

		let a_index = step_count % 2;
		let b_index = 1 - a_index;
		let counts = count_even_odd(north_west);
		tile_count += a_count * counts[a_index] + b_count * counts[b_index];

		while (remaining_step_count >= height)
		{
			tile_count += (full_grid_count + 1) * count_possible_tiles(north_west, remaining_step_count);
			full_grid_count += 1;
			remaining_step_count -= height;
		}
		tile_count += (full_grid_count + 1) * count_possible_tiles(north_west, remaining_step_count);
	}

	return tile_count;
}

function main()
{
	let input = read_file("input.txt");
	let input = parse_input(input.as_str());

	let part1_result = part1(input);
	std::print("part 1: {}\n", part1_result);
	let part2_result = part2(input);
	std::print("part 2: {}\n", part2_result);
}
