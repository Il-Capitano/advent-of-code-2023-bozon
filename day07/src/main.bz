import std::format;
import std::vector;
import std::utils;
import common;

struct hand_t
{
	.cards: [5: char];
	.bid: usize;
}

function parse_input(input: str) -> std::vector<hand_t>
{
	mut result = std::vector<hand_t>();

	for (let line in input.by_line())
	{
		let [cards, bid] = line.split(' ');
		mut card_chars = [5: char]();
		mut card_index = 0;
		for (let card in cards.chars())
		{
			card_chars[card_index] = card;
			card_index += 1;
		}
		result.push_back(hand_t[
			card_chars,
			parse_int(usize, bid),
		]);
	}

	return move result;
}

function get_card_index_part1(card: char) -> usize
{
	return switch (card) {
		'2', '3', '4', '5', '6', '7', '8', '9' => (card - '2') as usize,
		'T' => 8,
		'J' => 9,
		'Q' => 10,
		'K' => 11,
		'A' => 12,
		else => unreachable,
	};
}

function get_hand_strength_part1(cards: &[5: char]) -> int32
{
	mut card_counts = [13: int32]();
	for (let card in cards)
	{
		card_counts[get_card_index_part1(card)] += 1;
	}

	mut max_count = 0;
	mut second_max_count = 0;
	for (let count in card_counts)
	{
		if (count > max_count)
		{
			second_max_count = max_count;
			max_count = count;
		}
		else if (count > second_max_count)
		{
			second_max_count = count;
		}
	}

	return if (max_count == 1) {
		0 // high card
	} else if (max_count == 2 && second_max_count == 1) {
		1 // one pair
	} else if (max_count == 2 && second_max_count == 2) {
		2 // two pair
	} else if (max_count == 3 && second_max_count == 1) {
		3 // three of a kind
	} else if (max_count == 3 && second_max_count == 2) {
		4 // full house
	} else if (max_count == 4) {
		5 // four of a kind
	} else if (max_count == 5) {
		6 // five of a kind
	} else {
		unreachable
	};
}

function compare_hands_part1(lhs: &[5: char], rhs: &[5: char]) -> int32
{
	let lhs_strength = get_hand_strength_part1(lhs);
	let rhs_strength = get_hand_strength_part1(rhs);

	if (lhs_strength != rhs_strength)
	{
		return if (lhs_strength < rhs_strength) { -1 } else { 1 };
	}

	for (let i in 0..lhs.size())
	{
		if (lhs[i] != rhs[i])
		{
			return if (get_card_index_part1(lhs[i]) < get_card_index_part1(rhs[i])) { -1 } else { 1 };
		}
	}

	return 0;
}

function sort_part1(arr: [: mut hand_t])
{
	let size = arr.size();
	for (let i in 0..size)
	{
		for (let j in 0..size - i - 1)
		{
			if (compare_hands_part1(arr[j + 1].cards, arr[j].cards) < 0)
			{
				std::swap(arr[j + 1], arr[j]);
			}
		}
	}
}

function part1(input: [: hand_t]) -> usize
{
	mut hands = std::vector<hand_t>(input);
	sort_part1(hands.as_slice());

	mut result = 0uz;
	for (let i in 0..hands.size())
	{
		result += (i + 1) * hands[i].bid;
	}

	return result;
}

function get_card_index_part2(card: char) -> usize
{
	return switch (card) {
		'J' => 0,
		'2', '3', '4', '5', '6', '7', '8', '9' => (card - '1') as usize,
		'T' => 9,
		'Q' => 10,
		'K' => 11,
		'A' => 12,
		else => unreachable,
	};
}

function get_hand_strength_part2(cards: &[5: char]) -> int32
{
	mut card_counts = [13: int32]();
	for (let card in cards)
	{
		card_counts[get_card_index_part2(card)] += 1;
	}

	static_assert(get_card_index_part2('J') == 0);
	let joker_count = card_counts[0];
	mut max_count = 0;
	mut second_max_count = 0;
	for (let count in card_counts[1..])
	{
		if (count > max_count)
		{
			second_max_count = max_count;
			max_count = count;
		}
		else if (count > second_max_count)
		{
			second_max_count = count;
		}
	}

	return if (max_count + joker_count == 1) {
		0 // high card
	} else if (max_count + joker_count == 2 && second_max_count == 1) {
		1 // one pair
	} else if (max_count + joker_count == 2 && second_max_count == 2) {
		2 // two pair
	} else if (max_count + joker_count == 3 && second_max_count == 1) {
		3 // three of a kind
	} else if (max_count + joker_count == 3 && second_max_count == 2) {
		4 // full house
	} else if (max_count + joker_count == 4) {
		5 // four of a kind
	} else if (max_count + joker_count == 5) {
		6 // five of a kind
	} else {
		unreachable
	};
}

function compare_hands_part2(lhs: &[5: char], rhs: &[5: char]) -> int32
{
	let lhs_strength = get_hand_strength_part2(lhs);
	let rhs_strength = get_hand_strength_part2(rhs);

	if (lhs_strength != rhs_strength)
	{
		return if (lhs_strength < rhs_strength) { -1 } else { 1 };
	}

	for (let i in 0..lhs.size())
	{
		if (lhs[i] != rhs[i])
		{
			return if (get_card_index_part2(lhs[i]) < get_card_index_part2(rhs[i])) { -1 } else { 1 };
		}
	}

	return 0;
}

function sort_part2(arr: [: mut hand_t])
{
	let size = arr.size();
	for (let i in 0..size)
	{
		for (let j in 0..size - i - 1)
		{
			if (compare_hands_part2(arr[j + 1].cards, arr[j].cards) < 0)
			{
				std::swap(arr[j + 1], arr[j]);
			}
		}
	}
}

function part2(input: [: hand_t]) -> usize
{
	mut hands = std::vector<hand_t>(input);
	sort_part2(hands.as_slice());

	mut result = 0uz;
	for (let i in 0..hands.size())
	{
		result += (i + 1) * hands[i].bid;
	}

	return result;
}

function main()
{
	let input = read_file("input.txt");
	let input = parse_input(input.as_str());

	let part1_result = part1(input.as_slice());
	std::print("part 1: {}\n", part1_result);
	let part2_result = part2(input.as_slice());
	std::print("part 2: {}\n", part2_result);
}
