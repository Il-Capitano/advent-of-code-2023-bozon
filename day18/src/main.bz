import std::format;
import std::vector;
import std::math;
import std::utils;
import common;

enum direction
{
	up,
	down,
	left,
	right,
}

struct instruction_t
{
	.dir: direction;
	.length: isize;
	.wall_color: uint32;
}

function parse_color(s: str) -> uint32
{
	mut result = 0u32;
	for (let c in s.bytes())
	{
		result *= 16;
		let c = c as char;
		if (c >= '0' && c <= '9')
		{
			result += (c - '0') as uint32;
		}
		else if (c >= 'a' && c <= 'f')
		{
			result += 10 + (c - 'a') as uint32;
		}
	}
	return result;
}

function parse_input(input: str) -> std::vector<instruction_t>
{
	mut result = std::vector<instruction_t>();

	for (let line in input.by_line())
	{
		let [dir, line] = line.split(' ');
		let [length, color] = line.split(' ');

		result.push_back(instruction_t[
			switch (dir) {
				"U" => .up,
				"D" => .down,
				"L" => .left,
				"R" => .right,
				else => unreachable,
			},
			parse_int(isize, length),
			parse_color(color.split("(#")[1].split(')')[0]),
		]);
	}

	return result;
}

function make_grid(T: typename, height: usize, width: usize) -> std::vector<std::vector<T> >
{
	mut result = std::vector<std::vector<T> >();
	result.resize(height);
	for (let &mut row in result)
	{
		row.resize(width);
	}
	return move result;
}

function part1(instructions: [: instruction_t]) -> int32
{
	let [min_i, max_i, min_j, max_j] = {
		mut min_i = 0iz;
		mut max_i = 0iz;
		mut min_j = 0iz;
		mut max_j = 0iz;
		mut i = 0iz;
		mut j = 0iz;
		for (let &inst in instructions)
		{
			switch (inst.dir)
			{
				.up => i -= inst.length,
				.down => i += inst.length,
				.left => j -= inst.length,
				.right => j += inst.length,
			}
			min_i = std::min(min_i, i);
			max_i = std::max(max_i, i);
			min_j = std::min(min_j, j);
			max_j = std::max(max_j, j);
		}
		[ min_i, max_i, min_j, max_j ]
	};

	let height = (max_i - min_i + 1) as usize;
	let width = (max_j - min_j + 1) as usize;
	mut i = -min_i as usize;
	mut j = -min_j as usize;

	mut dug_grid = make_grid(bool, height, width);
	dug_grid[i, j] = true;

	for (let &inst in instructions)
	{
		switch (inst.dir)
		{
			.up => {
				let next_i = i - inst.length as usize;
				for (let grid_i in next_i..i)
				{
					dug_grid[grid_i, j] = true;
				}
				i = next_i;
			},
			.down => {
				let next_i = i + inst.length as usize;
				for (let grid_i in i + 1..=next_i)
				{
					dug_grid[grid_i, j] = true;
				}
				i = next_i;
			},
			.left => {
				let next_j = j - inst.length as usize;
				for (let grid_j in next_j..j)
				{
					dug_grid[i, grid_j] = true;
				}
				j = next_j;
			},
			.right => {
				let next_j = j + inst.length as usize;
				for (let grid_j in j + 1..=next_j)
				{
					dug_grid[i, grid_j] = true;
				}
				j = next_j;
			},
		}
	}

	for (let i in 1..height - 1)
	{
		mut inside = false;
		for (let j in 0..width)
		{
			if (dug_grid[i, j] && dug_grid[i + 1, j])
			{
				inside = !inside;
			}

			if (inside)
			{
				dug_grid[i, j] = true;
			}
		}
	}

	mut dug_squares = 0;
	for (let &row in dug_grid)
	{
		for (let tile in row)
		{
			if (tile)
			{
				dug_squares += 1;
			}
		}
	}
	return dug_squares;
}

function decode_instruction(n: uint32) -> [direction, isize]
{
	let dir: direction = switch (n & 0x0f) {
		0 => .right,
		1 => .down,
		2 => .left,
		3 => .up,
		else => unreachable,
	};
	let length = (n >> 4) as isize;
	return [ dir, length ];
}

struct horizontal_line_t
{
	.i: isize;
	.j_begin: isize;
	.j_end: isize;
}

function is_less(lhs: &horizontal_line_t, rhs: &horizontal_line_t) -> bool
{
	return lhs.i < rhs.i || (lhs.i == rhs.i && lhs.j_begin < rhs.j_begin);
}

function sort_horizontal_lines(lines: [: mut horizontal_line_t])
{
	for (let i in 0..lines.size())
	{
		let i = lines.size() - i - 1;
		for (let j in 0..i)
		{
			if (is_less(lines[j + 1], lines[j]))
			{
				std::swap(lines[j], lines[j + 1]);
			}
		}
	}
}

function insert_region(regions: &mut std::vector<[isize, isize]>, region: [isize, isize])
{
	mut i = regions.size();
	regions.push_back(region);
	while (i > 0 && regions[i, 0] < regions[i - 1, 0])
	{
		std::swap(regions[i], regions[i - 1]);
		i -= 1;
	}
}

function remove_region(regions: &mut std::vector<[isize, isize]>, index: usize)
{
	for (let i in index + 1..regions.size())
	{
		std::swap(regions[i - 1], regions[i]);
	}
	regions.resize(regions.size() - 1);
}

// returns the amount of squares that are removed
function modify_regions(regions: &mut std::vector<[isize, isize]>, line: &horizontal_line_t) -> isize
{
	mut left_index: ?usize = null;
	for (let i in 0..regions.size())
	{
		let &[j_begin, j_end] = regions[i];
		if (j_begin > line.j_end)
		{
			break;
		}

		if (j_begin < line.j_begin && j_end > line.j_end)
		{
			// divide region
			let new_right_region = [ line.j_end, regions[i, 1] ];
			regions[i, 1] = line.j_begin;
			regions.insert_region(new_right_region);
			return line.j_end - line.j_begin - 1;
		}

		if (j_begin == line.j_begin || j_begin == line.j_end || j_end == line.j_begin || j_end == line.j_end)
		{
			left_index = i;
			break;
		}
	}

	if (left_index == null)
	{
		insert_region(regions, [ line.j_begin, line.j_end ]);
		return 0;
	}

	let left_index = left_index.get_value();
	mut right_index: ?usize = null;
	for (let i in left_index + 1..regions.size())
	{
		let &[j_begin, j_end] = regions[i];
		if (j_begin > line.j_end)
		{
			break;
		}
		if (j_begin == line.j_begin || j_begin == line.j_end || j_end == line.j_begin || j_end == line.j_end)
		{
			right_index = i;
			break;
		}
	}

	if (right_index == null)
	{
		if (regions[left_index, 0] == line.j_begin && regions[left_index, 1] == line.j_end)
		{
			regions.remove_region(left_index);
			return line.j_end - line.j_begin + 1;
		}
		else if (regions[left_index, 0] == line.j_begin)
		{
			std::assert(regions[left_index, 1] > line.j_end);
			regions[left_index, 0] = line.j_end;
			return line.j_end - line.j_begin;
		}
		else if (regions[left_index, 0] == line.j_end)
		{
			regions[left_index, 0] = line.j_begin;
			return 0;
		}
		else if (regions[left_index, 1] == line.j_begin)
		{
			regions[left_index, 1] = line.j_end;
			return 0;
		}
		else if (regions[left_index, 1] == line.j_end)
		{
			std::assert(regions[left_index, 0] < line.j_begin);
			regions[left_index, 1] = line.j_begin;
			return line.j_end - line.j_begin;
		}
		unreachable;
	}

	let right_index = right_index.get_value();

	std::assert(regions[left_index, 1] == line.j_begin);
	std::assert(right_index == left_index + 1);
	std::assert(regions[right_index, 0] == line.j_end);
	regions[left_index, 1] = regions[right_index, 1];
	regions.remove_region(right_index);
	return 0;
}

function part2(instructions: [: instruction_t]) -> isize
{
	mut i = 0iz;
	mut j = 0iz;

	mut horizontal_lines = std::vector<horizontal_line_t>();

	for (let &inst in instructions)
	{
		let [dir, length] = decode_instruction(inst.wall_color);
		switch (dir)
		{
			.up => i -= length,
			.down => i += length,
			.left => {
				horizontal_lines.push_back(horizontal_line_t[ i, j - length, j ]);
				j -= length;
			},
			.right => {
				horizontal_lines.push_back(horizontal_line_t[ i, j, j + length ]);
				j += length;
			},
		}
	}

	sort_horizontal_lines(horizontal_lines.as_slice());

	mut regions = std::vector<[isize, isize]>();
	mut prev_i = 0iz;
	mut total_size = 0iz;

	mut index = 0uz;
	while (index != horizontal_lines.size())
	{
		mut next_index = index;
		while (next_index < horizontal_lines.size() && horizontal_lines[index].i == horizontal_lines[next_index].i)
		{
			next_index += 1;
		}

		let lines = horizontal_lines.as_slice()[index..next_index];
		index = next_index;

		let i = lines[0].i;
		for (let &region in regions)
		{
			total_size += (i - prev_i - 1) * (region[1] - region[0] + 1);
		}

		for (let &line in lines)
		{
			total_size += modify_regions(regions, line);
		}

		prev_i = i;
		for (let &region in regions)
		{
			total_size += (region[1] - region[0] + 1);
		}
	}

	return total_size;
}

function main()
{
	let input = read_file("input.txt");
	let input = parse_input(input.as_str());

	let part1_result = part1(input.as_slice());
	std::print("part 1: {}\n", part1_result);
	let part2_result = part2(input.as_slice());
	std::print("part 2: {}\n", part2_result);
}
